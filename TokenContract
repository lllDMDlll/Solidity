pragma solidity ^0.4.8;

import "./ERC20.sol";
import "./SafeMath";

contract Vault is Math {
    
    bool public isVault = false;
    
    BasicToken basicToken;
    address basicAddress;
    uint256 unlockedAtBlockNumber;
    
    uint public constant numBlocksLocked = 11111111; // calculate value of blocks to lock for desired amount of time
    
    function Vault(address _basicAddress) internal {
        if (_basicAddress == 0) throw;
        basicToken = BasicToken(msg.sender);
        basicAddress = _basicAddress;
        isVault = true;
        unlockedAtBlockNumber = safeAdd(block.number, numBlocksLocked);
    }
    
    function unlock() external {
        // if someone tries to unlock too early...
        if (block.number < unlockedAtBlockNumber) throw;
        // fails if toTransfer is 0
        if (!basicToken.transfer(basicAddress, basicToken.balanceOf(this))) throw;
    }
    
    // disallow payment since it is not for Ether
    function () {throw;}
    
}

contract BasicToken is Math, ERC20 {
    
    // flag that determines if address is for a real contract
    bool public isBasicToken = false;
    
    // Token Info
    string tokenName;
    string tokenSymbol;
    address _owner;
    uint256 public constant totalSupply = 1000000;
    uint256 public constant tokenRatio = 50; //How many tokens per Ether? (exchange rate for crowdsale)
    uint256 public constant decimals = 18; //Standard number (same as Ethereum)
    uint256 public constant crowdfundPercent = 75; //What percent of supply is in public crowdfund?
    uint256 public constant vaultPercent = 15; //What percent is kept for owner (team members, investors, etc)
    uint256 public constant teamPercent = 10; //What percent is used by team for marketing, bug bounty, improvements, etc?
    uint256 public constant hundredPercent = 100;
    
    mapping (address => uint256) balances;
    mapping (address => mapping (address => uint256)) allowed;
    
    address public basicToken;
    Vault public timeVault; // Time-locked wallet
    
    
    function basicToken(address _basicAddress) {
        tokenName = 'Basic';
        tokenSymbol = 'BAS';
        _owner = msg.sender;
        balance[_owner] = _totalSupply;
    }
    
    function balanceOf(address owner) constant returns (uint) {
        return balances[owner];
    }
    
    function transfer(address to, uint value) returns(bool success) {
        if((balance[msg.sender] > value) && value > 0) {
            balance[msg.sender] = safeSub(balance[to], value);
            balance[to] = safeAdd(balance[to], value);
            return true;
        }
        else {
            return false;
        }
     }
     
     function transferFrom(address from, address to, uint value) returns(bool success) {
        if (to == 0) throw;
        if(balance[from] >= value && allowed[from][msg.sender] >= value && value > 0) {
            balance[to] += value;
            balance[from] -= value;
            allowed[from][msg.sender] -= value;
            Transfer(from, to, value);
            return true;
        }
        else {
            return false;
        }
     }
     
     function approve(address spender, uint256 value) returns (bool ok) {
         if ((value != 0) && (allowed[msg.spender] != 0)) throw;
         
         allowed[msg.sender][spender] = value;
         Approval(msg.sender, spender, value);
         return true;
     }
     
     function allowance(address owner, address spender) constant returns(uint remaining) {
         return allowed[owner][spender];
     }
}
