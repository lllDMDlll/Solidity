pragma solidity ^0.4.8;

import "./ERC20.sol";
import "./SafeMath";


contract TeamVault is SafeMath {

    bool public isVault = false;

    ArtbotToken artbotToken;
    // Address where team members will pull tokens from.
    address teamAddress;
    uint256 unlockedAtBlockNumber;

    uint public constant numBlocksLocked = 1111111; // calculate desired amount of time to lock tokens 

    function TeamVault(address _teamAddress) internal {
        if (_artbotAddress == 0) throw;
        artbotToken = ArtbotToken(msg.sender);
        teamAddress = _teamAddress;
        isVault = true;
        unlockedAtBlockNumber = safeAdd(block.number, numBlocksLocked);
    }

    function unlock() external {
        // if someone tries to unlock too early...
        if (block.number < unlockedAtBlockNumber) throw;
        // fails if toTransfer is 0
        if (!artbotToken.transfer(teamAddress, artbotToken.balanceOf(this))) throw;
    }

    // Don't allow payment since it is not for Ether
    function () {
        throw;
    }

}

contract ArtbotToken is SafeMath, ERC20 {
    
    // flag that determines if address is for a real contract
    bool public isArtbotToken = false;
    address public investorAddress;
    address public fundAddress;

    // Token Info
    string tokenName;
    string tokenSymbol;
    address _owner;
    uint256 public constant totalSupply = 1000000000;
    uint256 public constant tokenRatio = 7400; //How many tokens per Ether? (exchange rate for crowdsale)
    uint256 public constant decimals = 10**18; //Standard number (breaks Ether down to wei)
    uint256 public constant presalePercent = 15; //What percent is made available for presale?
    uint256 public constant crowdfundPercent = 60; //What percent of supply is in public crowdfund?
    uint256 public constant investorPercent = 10; //What percent is set aside for advisors and early investors?
    uint256 public constant fundPercent = 10; //Percent of tokens set aside to stabalize market if needed.
    uint256 public constant teamPercent = 5; //What percent is put in the team member vault?
    uint256 public constant hundredPercent = 100;
    
    uint256 public constant startsAt = 4500000; //Starting block of crowdsale
    uint256 public constant endsAt = 4657553; //Ending block of crowdsale. This is 1 month
    
    /** Crowdsale Time Signatures:
     * 
     * 1 hour: 212 blocks
     * 1 day: 5082 blocks
     * 1 week: 38,117 blocks
     * 1 month: 157,553 blocks
     */
     
     uint256 public constant firstChange = 4538117; //Price change after 1 week
     uint256 public constant secondChange = 4576234; //Price change after 2 weeks
    
    mapping (address => uint256) balances;
    mapping (address => mapping (address => uint256)) allowed;
    
    address public artbotToken;
    TeamVault public timeVault; // Artbot's time-locked vault 
    
    
    function ArtbotToken() {
        tokenName = 'Artbot';
        tokenSymbol = 'ABT';
        _owner = msg.sender;
        balance[_owner] = _totalSupply;
    }
    
    function balanceOf(address owner) constant returns (uint) {
        return balances[owner];
    }
    
    function transfer(address to, uint value) returns(bool success) {
        if((balance[msg.sender] > value) && value > 0) {
            balance[msg.sender] = safeSub(balance[to], value);
            balance[to] = safeAdd(balance[to], value);
            return true;
        }
        else {
            return false;
        }
     }
     
     function transferFrom(address from, address to, uint value) returns(bool success) {
        if (to == 0) throw;
        if(balance[from] >= value && allowed[from][msg.sender] >= value && value > 0) {
            balance[to] += value;
            balance[from] -= value;
            allowed[from][msg.sender] -= value;
            Transfer(from, to, value);
            return true;
        }
        else {
            return false;
        }
     }
     
     function approve(address spender, uint256 value) returns (bool ok) {
         if ((value != 0) && (allowed[msg.spender] != 0)) throw;
         
         allowed[msg.sender][spender] = value;
         Approval(msg.sender, spender, value);
         return true;
     }
     
     function allowance(address owner, address spender) constant returns(uint remaining) {
         return allowed[owner][spender];
     }
}
